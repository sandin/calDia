<?php
require_once 'PHPUnit/Framework.php';

require_once '../inc/CalibrateDiagonal.php';

/**
 * Test class for CalibrateDiagonal.
 * Generated by PHPUnit on 2010-08-21 at 08:57:45.
 */
class CalibrateDiagonalTest extends PHPUnit_Framework_TestCase
{
    /** 
     * 允许误差值
     */
    const E = 0.01;

    /**
     * @var CalibrateDiagonal
     */
    protected $object;

    /**
     * testData 
     * 测试数据
     * 
     * @var mixed
     * @access protected
     */
    protected $testData;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new CalibrateDiagonal(4,3,4,3,5,5);

        $this->testData = array ( 
            array(
                'cos'   => cos(deg2rad(90)),
                'lines' => array(3,4,5)
            ),
            array(
                'cos'   => cos(deg2rad(37)),
                'lines' => array(5,4,3)
            ),
            array(
                'cos'   => cos(deg2rad(53)),
                'lines' => array(5,3,4)
            )
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testCalibrate().
     */
    public function testCalibrate()
    {
        
    }

    /**
     *
     */
    public function testGetCos()
    {
        $obj = $this->object;

        foreach ( $this->testData as $item ) {
            list($a, $b, $c) = $item['lines'];
            $this->assertTrue( abs($item['cos'] - $obj::getCos($a, $b, $c)) < self::E);
        }
    }

    /**
     *
     */
    public function testCosToSin()
    {
        $obj = $this->object;

        $cos_60 = cos(deg2rad(60)); //0.5 * 2 = 0.25
        $sin_60 = sin(deg2rad(60)); //0.866... * 2 = 0.75

        $cos_30 = cos(deg2rad(30)); 
        $sin_30 = sin(deg2rad(30));

        $this->assertTrue(abs($obj::cosToSin($cos_60) - $sin_60) < self::E);
        $this->assertTrue(abs($obj::cosToSin($cos_30) - $sin_30) < self::E);
    }

    /**
     *
     */
    public function testCosines()
    {
        $obj = $this->object;

        foreach ($this->testData as $item) {
            list($a, $b, $c) = $item['lines'];
            $lineWidth = $obj->cosines($a, $b, $item['cos']);
            $this->assertTrue(abs($lineWidth - $c) < self::E);
        }
    }

    /**
     *
     */
    public function testCosX_plus_Y()
    {
        $obj = $this->object;

        $data = array(
            array(20,34),
            array(40,20),
            array(54,12)
        );

        foreach ($data as $i) {
            $cosA = cos(deg2rad($i[0]));
            $cosB = cos(deg2rad($i[1]));
            $cosA_plus_B = cos(deg2rad($i[0] + $i[1]));

            $cosX_plus_Y = $obj->cosX_plus_Y($cosA, $cosB);
            $this->assertTrue( abs($cosA_plus_B - $cosX_plus_Y) < 0.01 );
        }
    }

    /**
     *
     */
    public function testGetB()
    {
        $obj = $this->object;

        // up-right-down-left-左上到右下对角线-右上到左下对角线 
        $date = array(
            array(4, 3, 4, 3, 5, 5),
            array(300, 100, 300, 100, 316.23, 316.23),
            array(217.39, 128.09, 213.57, 116.12, 225.11, 268.22)
        );
        foreach ($date as $i) {
            list( $a, $b, $c, $d, $X, $Y ) = $i;
            $B = $obj->getB($a,$b,$c,$d,$X);
            $this->assertTrue(abs($Y - $B) < self::E);
        }
    }

    /**
     *
     */
    public function testLoopIt()
    {
        $obj = $this->object;

        $data = array(
            array(
                'lines' => array(4,3,4,3,5,6),
                'expect' => 5
            ),
            array(
                'lines' => array(217.39, 128.09, 213.57, 116.12, 228, 270),
                'expect' => 268
            )
        );

/*
        foreach ($data as $item) {
            list($a, $b, $c, $d, $X, $Y) = $item['lines'];
            $obj->setParam($a, $b, $c, $d, $X, $Y);
            // 期待对角线长度
            $expect = $item['expect'];
            // 分析
            $result = $obj->calibrate();
            //var_dump($result);
            $this->assertTrue(abs($result[1] - $expect) < 5);
            $this->assertTrue(abs($result[0] - $X) < 5);
        }
 */
        $realData = array(
            // 右起 竖1
            array(1035, 910, 1035, 910, 1195, 1530),
            array(1035, 890, 1035, 890, 1180, 1520),
            array(1035, 900, 1035, 930, 1185, 1545),

            // 左起 横1
            array(1040, 910, 1040, 910, 1535, 1195),
            array(1010, 910, 1010, 910, 1520, 1175),
             array(1015, 910, 1015, 910, 1520, 1182),
            array(1005, 910, 1005, 910, 1510, 1170)

        );

        foreach ($realData as $data) {
            list($a,$b,$c,$d,$X,$Y) = $data;
            $obj->setParam($a,$b,$c,$d,$X,$Y);
            $result = $obj->calibrate();
            //var_dump($result);

            // 差值范围控制在7以下,一般为5以下
            $this->assertTrue(abs($result[0] - $data[4]) <= 8);
            $this->assertTrue(abs($result[1] - $data[5]) <= 8);
        }
    }
}
?>
